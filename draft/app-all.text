from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify
                   )
from werkzeug import secure_filename
app = Flask(__name__)

import sys,os,random
import getters
import setters

from dotenv import load_dotenv
load_dotenv()

# CAS(app)

# app.config['CAS_SERVER'] = 'https://login.wellesley.edu:443'
# app.config['CAS_AFTER_LOGIN'] = 'logged_in'
# app.config['CAS_LOGIN_ROUTE'] = '/module.php/casserver/cas.php/login'
# app.config['CAS_LOGOUT_ROUTE'] = '/module.php/casserver/cas.php/logout'
# app.config['CAS_AFTER_LOGOUT'] = 'http://cs.wellesley.edu:8343/'
# app.config['CAS_VALIDATE_ROUTE'] = '/module.php/casserver/serviceValidate.php'

app.secret_key = os.getenv('secret_key')
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

app.config['TRAP_BAD_REQUEST_ERRORS'] = True

@app.route('/')
def index():
    return render_template('base.html')

@app.route('/query', methods=['GET','POST'])
def query():
    conn = getters.getConn('cs304reclib_db')
    args = request.args

    if 'q' in args:
        q = args['q']
    if 'filter' in args:
        kind = args['filter']

    if kind == 'album':
        results = getters.searchAlbums(q, conn)
    if kind == 'artist':
        results = getters.searchArtists(q, conn)
    if kind == 'year':
        results = getters.searchYear(q, conn)
    if kind == 'genre':
        results = getters.searchGenre(q, conn)
    if kind == 'track':
        results = getters.searchTrack(q, conn)

    return render_template('results.html',
                            results=results,
                            query=q,
                            kind=kind)

@app.route('/album/<aid>', methods=['GET'])
def album(aid):
    conn = getters.getConn('cs304reclib_db')
    album = getters.getAlbumByID(aid, conn)
    
    res = getters.getReservation(aid, conn)
    tracks = getters.getTracks(aid, conn)
    genres = getters.getGenres(aid, conn)
    
    # if the album has been returned
    if res is None or res['returned'] == 1:
        avail = 'Available'
    # if not, pass the due date to the template
    else:
        avail = 'Due back ' + res['due'].strftime('%m/%d/%Y')

    print(album['location'])

    return render_template('album.html',
                            album=album,
                            avail=avail,
                            tracks=tracks,
                            genres=genres)

@app.route('/artist/<artist>', methods=['GET'])
def artist(artist):
    conn = getters.getConn('cs304reclib_db')
    albums = getters.getArtist(artist, conn)
    
    if len(albums) > 0:
        return render_template('artist.html',
                                artist=artist,
                                albums=albums )
    else:
        # Need to implement error page
        print('Show error page')
        return redirect(request.referrer)

@app.route('/login/', methods=['GET','POST'])
def login():
    return redirect(url_for('index'))
    # print ('Session keys: ',session.keys())
    # for k in session.keys():
    #     print (k,' => ',session[k])
    # if '_CAS_TOKEN' in session:
    #     token = session['_CAS_TOKEN']
    # if 'CAS_ATTRIBUTES' in session:
    #     attribs = session['CAS_ATTRIBUTES']
    #     print ('CAS_attributes: ')
    #     for k in attribs:
    #         print ('\t',k,' => ',attribs[k])
    # if 'CAS_USERNAME' in session:
    #     is_logged_in = True
    #     username = session['CAS_USERNAME']
    #     print('CAS_USERNAME is: ',username)
    # else:
    #     is_logged_in = False
    #     username = None
    #     print('CAS_USERNAME is not in the session')
    # return render_template('base.html', username=username, is_logged_in=is_logged_in)

@app.route('/update/', methods=['GET','POST'])
def update():
    '''ADMIN FEATURE'''
    conn = getters.getConn('cs304reclib_db')
    
    # get albums with incomplete fields
    albums = getters.getIncompletes(conn)
    
    if request.method == 'POST':
        aid = request.form.get('menu-aid')
        album = getters.getAlbumByID(aid, conn)
        form = request.form

        if 'submit' in form:
            form = request.form
            print(form)
            action = form['submit']
            aid = form['album-id']
            print('here in submit')
        
            if action == 'delete':
                print(aid)
                setters.deleteAlbum(aid, conn)
                print('here in delete')
                flash("Album " + str(aid) + " was deleted")
                return render_template('update.html',
                                        incompletes = albums,
                                        a = {},
                                        total = len(albums))

        return render_template('update.html',
                                incompletes = albums,
                                a = album,
                                total = len(albums))
    
    return render_template('update.html',
                            incompletes = albums,
                            a = {},
                            total = len(albums))

@app.route('/logged-in/', methods=['GET','POST'])
def loggedin():
    flash('Successfully logged in!')
    return redirect(url_for('index'))

@app.route('/profile/', methods=['GET','POST'])
def profile():
    return redirect(url_for('index'))

@app.route('/checkin/', methods=['GET','POST'])
def checkin():
    # pseudocode:
    # if user is not logged in:
    #   flash('You have to log in before you can check anything in')
    # else:
    #   conn = getters.getConn('cs304reclib_db')
    #   

    return render_template('check-in.html')

@app.route('/checkinAjax/', methods=['GET','POST'])
def checkinAjax():
    # runs SQL statement that changes album's availability
    # from 'not available' to 'available'
    conn = getters.getConn('cs304reclib_db')
    # album = album user has selected to check in
    # run python code to update album availability
    print("hello")
    return redirect(url_for('index'))
    

@app.route('/admin/', methods=['GET','POST'])
def admin():
    return redirect(url_for('index'))

@app.route('/insert/', methods=['GET','POST'])
def insert():
    conn = getters.getConn('cs304reclib_db')
    
    if request.method == 'POST':
        name = request.form.get('album-name')
        artist = request.form.get('album-artist')
        print(name, artist)
        
        # expand to handle duplicates (if album already exists)
        res = setters.insertAlbum(name, artist, conn)
    
        return render_template('insert.html')

    return render_template('insert.html')

if __name__ == '__main__':

    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    app.debug = True
    app.run('0.0.0.0',port)import dbi

def getConn(db):
    '''Returns a database connection for that db'''
    dsn = dbi.read_cnf()
    conn = dbi.connect(dsn)
    conn.select_db(db)
    return conn

def searchAlbums(query, conn):
    '''adds tracks and their order
    to track table'''

    curs = dbi.dictCursor(conn)
    curs.execute('select * from album where name like %s',
                ['%' + query + '%'])

    return curs.fetchall()

def searchArtists(query, conn):
    '''returns all artists matching a query'''

    curs = dbi.dictCursor(conn)
    curs.execute('select * from album ' +\
                 'where artist like %s',
                  ['%' + query + '%'])
    return curs.fetchall()

def searchYear(query, conn):
    '''returns all albums from given year'''

    curs = dbi.dictCursor(conn)
    curs.execute('select * from album ' +\
                 'where year = %s',
                  [query])
    return curs.fetchall()

def searchGenre(query, conn):
    '''returns all albums of a specific genre'''

    curs = dbi.dictCursor(conn)
    curs.execute('select * from album a ' +\
                 'inner join genre g ' +\
                    'on a.aid = g.aid ' +\
                 'where g.name like %s ' +\
                 'group by a.aid;', ['%' + query + '%'])
    
    return curs.fetchall()
    

def searchTrack(query, conn):
    '''returns all albums that contain
    the query in their track list'''

    curs = dbi.dictCursor(conn)
    curs.execute('select * from album a ' +\
                 'inner join track t ' +\
                    'on a.aid = t.aid ' +\
                 'where t.name like %s ' +\
                 'group by a.aid;', ['%' + query + '%'])

    return curs.fetchall()

def getAlbumByID(aid, conn):
    '''returns an album with that id'''
    curs = dbi.dictCursor(conn)
    curs.execute('select * from album where aid = %s', [aid])
    return curs.fetchone()
    
def getReservation(aid, conn):
    '''gets the most recent reservation
    for a particular album id'''
    curs = dbi.dictCursor(conn)
    curs.execute('select * from reservation where aid = %s ' +\
                  'order by due desc limit 1;', [aid])
    
    return curs.fetchone()

def getGenres(aid, conn):
    '''gets genres for an album
    given album's id'''
    curs = dbi.dictCursor(conn)
    curs.execute('select * from genre where aid = %s', [aid])
    
    return curs.fetchall()

def getTracks(aid, conn):
    ''''gets tracks for an album
    given album's id'''
    curs = dbi.dictCursor(conn)
    curs.execute('select * from track where aid = %s', [aid])
    
    return curs.fetchall()

def getArtist(artist, conn):
    '''gets all an artist's albums'''
    curs = dbi.dictCursor(conn)
    curs.execute('select * from album where artist = %s;', [artist])

    return curs.fetchall()

def getIncompletes(conn):
    # gets albums with incomplete info
    curs = dbi.dictCursor(conn)
    curs.execute('select * from album where ' +\
                 'year IS NULL')
    incompletes = curs.fetchall()
    return incompletes

# conn = getConn('cs304reclib_db')
# incompletes = getIncompletes(conn)
# print(len(incompletes))
# print(incompletes[0])import dbi
from add import *

def getConn(db):
    '''Returns a database connection for that db'''
    dsn = dbi.read_cnf()
    conn = dbi.connect(dsn)
    conn.select_db(db)
    return conn

def insertAlbum(name, artist, conn):
    '''takes a user-inputted album and
    adds it to the album table'''
    
    try:
        name = fixThes(name, ', the')
        name = fixThes(name, ',the')
        artist = fixThes(artist, ',the')
        artist = fixThes(artist, ', the')

        curs = dbi.dictCursor(conn)
        curs.execute('insert into album (name, artist, fmt) ' +\
                     'values (%s, %s, %s)', [name, artist, 'cd'])
    except:
        return False

def deleteAlbum(aid, conn):
    '''deletes an album from the album table'''
    curs = dbi.dictCursor(conn)
    curs.execute('delete from album where aid = %s', [aid])


# def insertTracks(track, num, conn):
#     '''takes a list of tracks and updates
#     the track table'''

# def insertGenre(genre, aid, conn):
#     '''inserts a genre/album pair into
#     the genre table'''

import csv
import dbi
from spotify import *

def addAlbums(conn):
    # reads results.csv and updates appropriate tables

    with open('./results.csv') as csv_read:
        
        reader = csv.reader(csv_read, delimiter=',')

        linecount = 0

        for row in reader:
            if linecount == 0:
                linecount += 1
            else:
                print('processing ', linecount, ' lines')
                linecount += 1

                if len(row) > 3:
                    for i in range(len(row) - 1):
                        if row[i] == '':
                            row[i] = None

                    tracks = tracklist(row[9])
                    genres = genrelist(row[8])

                    aid = insertAlbum(row, conn)
                    insertTracks(tracks, aid, conn)
                    insertGenres(genres, aid, conn)
                else:
                    lowData(row, conn)
                    
        return

def getConn(db):
    '''Returns a database connection for that db'''
    dsn = dbi.read_cnf()
    conn = dbi.connect(dsn)
    conn.select_db(db)
    return conn

def tracklist(tracks):
    '''given a list of tracks in string form,
    processes them and returns a list
    of lists containing the track name, order, and id'''

    try:
        tracks = tracks[1:-1]

        tracks = tracks.split('], [')
        tx = []

        for t in tracks:
            t = t + ']'
            t = t.strip('][')
            t = t.replace("'", '')
            t = t.split(', ')
            try:
                t[1] = int(t[1])
            except:
                for i in range(len(t) - 1):
                    if (t[i].isdigit()):
                        t[0:i] = [', '.join(t[0:i])]
                        t[1] = int(t[1])
            tx.append(t)
    
        return tx
    except:
        return ''

def genrelist(genres):
    
    try:
        genres = genres.strip('][').replace("'", '').split(', ')
        return genres
    except:
        return ''

def insertTracks(tracklist, aid, conn):
    '''adds tracks and their order
    to track table'''

    curs = dbi.dictCursor(conn)
    for track in tracklist:
        curs.execute('insert into track ' +\
                     '(name, num, spotify_id, aid) ' +\
                     'values (%s, %s, %s, %s)',
                     [track[0], track[1], track[2], aid])

def insertGenres(genrelist, aid, conn):
    '''adds genres and their corresponding
    album to the genres table'''

    curs = dbi.dictCursor(conn)
    for genre in genrelist:
        curs.execute('insert into genre (name, aid) ' +\
                     'values (%s, %s)', [genre, aid])

def insertAlbum(row, conn):
    album = row[0]
    artist = row[1]
    location = row[2]
    spotify_artist_id = row[3]
    spotify_album_id = row[4]
    released = int(row[5])
    art = row[6]
    embed = row[7]
    spotify_name = getAlbumName(embed)
    spotify_artist = getArtistName(embed)

    curs = dbi.dictCursor(conn)
    curs.execute('insert into album ' +\
                    '(name, artist, fmt, ' +\
                    'spotify_name, spotify_artist, location, ' +\
                    'year, art, embed, spotify_album_id, ' +\
                    'spotify_artist_id)'
                    'values ' +\
                    '(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);',
                    [album, artist, 'cd', spotify_name, spotify_artist,
                    location, released, art, embed,
                    spotify_album_id, spotify_artist_id])

    curs.execute('select LAST_INSERT_ID();')
    aid = curs.fetchone()['LAST_INSERT_ID()']
    
    return aid
    

def lowData(row, conn):
    album = row[0]
    artist = row[1]
    location = row[2]

    curs = dbi.dictCursor(conn)
    curs.execute('insert into album ' +\
                    '(name, artist, fmt, ' +\
                    'spotify_name, spotify_artist, location, ' +\
                    'year, art, embed, spotify_album_id, ' +\
                    'spotify_artist_id)'
                'values ' +\
                    '(%s, %s, %s, NULL, NULL, ' +\
                    '%s, NULL, NULL, NULL, NULL, NULL);',
                    [album, artist, 'cd', location])

    curs.execute('select LAST_INSERT_ID();')
    aid = curs.fetchone()['LAST_INSERT_ID()']
    
    return aid

# conn = getConn('cs304reclib_db')
# addAlbums(conn)

def updateThe(column, conn):
    '''Addresses format variations including "the"
    ex. changes "Beatles, The" to "The Beatles"'''
    curs = dbi.dictCursor(conn)
    
    if column == 'name':
        curs.execute("select name, aid from album where name like '%the'")
    if column == 'artist':
        curs.execute("select artist, aid from album where artist like '%the'")
    else:
        print("Please select a valid column")
        return

    fixes = curs.fetchall()
    count = 0

    # iterate through all albums where a value ends with 'the'
    for album in fixes:
        print("processing " + str(count) + " of " + str(len(fixes)))
        print(album)
        
        fix = album[column]
        aid = album['aid']

        # check for both formats
        fix = fixThes(fix, ', the')
        fix = fixThes(fix, ',the')
        print(fix)
        
        if column == 'name':
            curs.execute("update album set name = %s where aid = %s", [fix, aid])
        if column == 'artist':
            curs.execute("update album set artist = %s where aid = %s", [fix, aid])
        
        count += 1

def fixThes(name, phrase):
    
    if phrase in name.lower():
        i = name.lower().rfind(phrase)
        # the phrase is the last part of the name
        if i == (len(name) - len(phrase)):
            name = 'The ' + name[:i]
    
    return name

def manualFixes(conn):
    curs = dbi.dictCursor(conn)

    curs.execute('update album set artist = %s where aid = %s',
                 ['The Wee Turtles', 951])
    curs.execute('update album set artist = %s where aid = %s',
                 ['The Popinjays', 2399])
    curs.execute('update album set artist = %s where aid = %s',
                 ['The Popinjays', 2397])
    curs.execute('update album set artist = %s where aid = %s',
                 ['The Third Sex', 13343])
    curs.execute('update album set artist = %s where aid = %s',
                 ['The Honeydogs', 15218])
from dotenv import load_dotenv
import os
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

load_dotenv()

client = os.getenv('client_id')
secret = os.getenv('secret')

client_credentials_manager = SpotifyClientCredentials(client_id=client, client_secret=secret)
spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

def getAlbum(artist, album):
    query='artist:' + artist + ' album:' + album
    results = spotify.search(q=query, type='album')
    if len(results['albums']['items']) > 0:
        return results['albums']['items'][0]
    else:
        return False

def getProps(album):
    spotify_album_id = album['id']
    tracks = getTracks(spotify_album_id)
    spotify_artist_id = album['artists'][0]['id']
    released = album['release_date']
    if (album['release_date_precision'] != 'year'):
        released = album['release_date'][0:4]
    if len(album['images']) > 0:
        art = album['images'][0]['url']
    else:
        art = ''
    embed = album['uri']
    genres = getGenres(spotify_artist_id)

    return { 'spotify_album_id': spotify_album_id,
             'spotify_artist_id': spotify_artist_id,
             'released': released,
             'art': art,
             'embed': embed,
             'genres': genres,
             'tracks': tracks }

def getGenres(artist_id):
    artist = spotify.artist(artist_id)
    return artist['genres']

def getTracks(album_id):
    tracks = spotify.album_tracks(album_id=album_id)
    
    tracklist = []
    for t in tracks['items']:
        trk = [t['name'], t['track_number'], album_id]
        tracklist.append(trk)

    return tracklist

def getArtistName(album_id):
    try:
        return spotify.album(album_id)['artists'][0]['name']
    except:
        return None

def getAlbumName(album_id):
    try:
        return spotify.album(album_id)['name']
    except:
        return Noneimport os
import glob
import pandas as pd

os.chdir('./data')

extension = 'csv'
all_filenames = [i for i in glob.glob('*.{}'.format(extension))]

combined_csv = pd.concat([pd.read_csv(f) for f in all_filenames])
combined_csv.to_csv('library.csv', index=False)from dotenv import load_dotenv
from spotify import *
import csv
from itertools import islice

def read():
    with open('./source.csv') as csv_read:
        reader = csv.reader(csv_read, delimiter=',')

        for row in islice(reader, 14097, None):
            print(row)
            return

def write(start):

    with open('./source.csv') as csv_read, \
         open('./results.csv', 'a') as csv_write:
        
        reader = csv.reader(csv_read, delimiter=',')
        writer = csv.writer(csv_write, delimiter=',')

        line_count = 0            

        for row in islice(reader, start, None):

            if line_count == 0:
                line_count += 1
            else:
                artist = row[1]
                album = row[0]
                location = row[2]

                if location.lower() != 'trash':
                    record = getAlbum(artist, album)

                    if not record:
                        writer.writerow(row)
                    else:
                        props = getProps(record)

                        row.append(props['spotify_artist_id'])
                        row.append(props['spotify_album_id'])
                        row.append(props['released'])
                        row.append(props['art'])
                        row.append(props['embed'])
                        row.append(props['genres'])
                        row.append(props['tracks'])
                        writer.writerow(row)
                        print(f'Processed {line_count} lines.')

            line_count += 1use cs304reclib_db;

DROP TABLE IF EXISTS album;

CREATE TABLE album (
    aid int NOT NULL AUTO_INCREMENT,
    name varchar(150) NOT NULL,
    artist varchar(150) NOT NULL,
    fmt ENUM('cd', 'record'), -- all entries will be CDs, but records will be added later
    spotify_name varchar(150), -- a more 'accurate' album title
    spotify_artist varchar(150), -- a more 'accurate' artist name
    location varchar(50), -- this will be null for most records
    year int,
    art varchar(2083),
    embed varchar(2083),
    spotify_album_id varchar(22),
    spotify_artist_id varchar(22),
    primary key (aid)
)use cs304reclib_db;

DROP TABLE IF EXISTS genre;

CREATE TABLE genre (
    name varchar(150),
    aid int NOT NULL,
    foreign key (aid)
        references album(aid)
        on delete cascade
)use cs304reclib_db;

DROP TABLE IF EXISTS person;

CREATE TABLE person (
    bid varchar(9) NOT NULL,
    name varchar(150) NOT NULL,
    username varchar(8) NOT NULL,
    genre1 varchar(50),
    genre2 varchar(50),
    genre3 varchar(50),
    is_admin BOOLEAN NOT NULL,
    primary key (bid)
)use cs304reclib_db;

DROP TABLE IF EXISTS reservation;

CREATE TABLE reservation (
  rid int NOT NULL AUTO_INCREMENT,
  checkout date,
  due date,
  returned BOOLEAN NOT NULL,
  aid int NOT NULL,
  bid varchar(9) NOT NULL,
  primary key (rid),
  foreign key (aid)
    references album(aid)
    on delete cascade,
  foreign key (bid)
    references person(bid)
    on delete cascade
)use cs304reclib_db;

DROP TABLE IF EXISTS track;

CREATE TABLE track (
    name varchar(150),
    num int,
    spotify_id varchar(22),
    tid int NOT NULL AUTO_INCREMENT,
    aid int NOT NULL,
    primary key (tid),
    foreign key (aid)
        references album(aid)
        on delete cascade
)<!-- add an album to the library -->
<!-- TODO -->
<!-- Copy over incompletes from hwk5 -->
<!-- Show pre-existing values in form -->

{% extends "base.html" %}

{% block content %}

<h1>Add an album</h1>
<h2>or select from albums with incomplete data</h2>

{% endblock %}{% extends "base.html" %}

{% block content %}

{% if album['spotify_name'] != None %}
    <h1>{{ album['spotify_name'] }}</h1>
{% else %}
    <h1>{{ album['name'] }}</h1>
{% endif %}
{% if album['spotify_artist'] != None %}
    <h1>{{ album['spotify_artist'] }}</h1>
{% else %}
    <h1>{{ album['artist'] }}</h1>
{% endif %}

<button>Check me out!</button><br>

{% if album['art'] != None %}
    <img src={{ album['art'] }}
         alt="album art for {{ album['name']}}"
         width=400px></img>
{% endif %}

<ul>
    {% if album['year'] != None %}
        <li>Year: {{ album['year'] }}</li>
    {% endif %}
    <li>Format: {{ album['fmt']|upper }} </li>
    {% if album['location'] != None %}
        <li>Location: {{ album['location'] }}</li>
    {% endif %}
    <li>{{ avail }}</li>
</ul>

{% if album['spotify_album_id'] != None %}
    <iframe src="https://open.spotify.com/embed/album/{{ album['spotify_album_id'] }}"
            width="400" height="400" frameborder="0" allowtransparency="true"
            allow="encrypted-media"></iframe>
{% endif %}

<!-- show genres -->
{% if genres != None %}
    <h1>Genres</h1>
    {% for g in genres %}
        <li>{{ g['name'] }}</li>
    {% endfor %}
{% endif %}

<!-- show tracks -->
<!-- if there's no embed but there are tracks, show the tracks -->
<!-- {% if tracks != None %}
    <p>{{ tracks }}</p>
{% endif %} -->


{% endblock %}{% extends "base.html" %}

{% block content %}

<h1>{{ artist }}</h1>

<ol>
    {% for a in albums %}
        {% if a['year'] != None %}
            <li><a href="/album/{{ a['aid'] }}">{{ a['name'] }} ({{a['year']}})</a></li>
        {% else %}
            <li><a href="/album/{{ a['aid'] }}">{{ a['name'] }}</a></li>
        {% endif %}
    {% endfor %}
</ol>

{% endblock %}<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Bella Virgilio">
    <title>WZLY Record Library</title>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='../static/style.css') }}">
</head>
<body>

<ul id="nav">
    <li><a href='/'>Home</a></li>
    <li><a href='/login/'>Sign In</a></li>
    <li><a href='/profile/'>Profile</a></li>
    <li><a href='/checkin/'>Check in materials</a></li>
    <!-- <li><a href='/admin/'>Admin</a></li> -->
    <li><a href='/insert/'>Admin: Insert Album</a></li>
    <li><a href='/update/'>Admin: Delete/Update Album</a></li>
</ul>

<div id='flashes'>
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <div id="messages">
            {% for msg in messages %}
                <p>{{msg}}</p>
            {% endfor %}
            </div>
        {% endif %}
    {% endwith %}
</div>

<form class="search" method="GET" action="/query">
    <p><label>Search: <input id="searchterm" type="text" required name="q" class="txt"></label>
    <label>Filter
        <select class="dropdown" required name="filter">
            <option value="">Select</option>
            <option value="album">Album</option>
            <option value="artist">Artist</option>
            <option value="year">Year</option>
            <option value="genre">Genre</option>
            <option value="track">Track</option>
        </select>
    </label>
    <button id="searchbutton" type="submit" name="submit" value="search">Search</button>
</form>
            
{% block content %}

<h1>Welcome to the WZLY Record Library!</h1>

{% endblock %}
    
</body>
</html>{% extends "base.html" %}

{% block content %}

<p>Hi {{ user }}!</p>

<form class="check-in" method="GET" action="/checkin/">
    <p><label>Please select which item you are checking in: 
        <select required name="kind" id="kind">
            <option value = "">Select one...</option>
            <option value = "one">1</option>
            <option value = "two">2</option>
            <option value = "three">3</option>
            
            <!-- 
            {% for item in items %}
                <option value="option">{{ item }}</option>
            {% endfor %}
            -->

        </select>
    </label></p>
    <button id="checkin-button" type="submit" name="submit" value="checkin">Check In!</button>
</form>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<script src="//code.jquery.com/jquery-3.2.1.min.js"></script>

{% endblock %}

<script>

$(".checkin-button").on("click", function() {
    alert("success")
    
    // $user = "1";
    // $album = "1";
    // $.post("/checkinAjax/", {user: $user, album: $album});

    // redirect to a 'successfully checked in page'?
    
})

</script>{% extends "base.html" %}

{% block content %}

<h1>Insert Album</h1>

<form method=post action="/insert/">
   
    <fieldset>
        <legend>Album Data</legend>
            <table>
                <tr><td><label for="album-name">Album Name:</label></td>
                <td><input type="text" name="album-name" id="album-name"></td></tr>
                <tr><td><label for="album-artist">Artist:</label></td>
                <td><input type="text" name="album-artist" id="album-artist"></td></tr>
            </table>
    </fieldset>
    
    <p> <input type='submit' value='Insert Album'> </p>
        
</form>

{% endblock %}{% extends "base.html" %}

{% block content %}

<p>{{ kind }}s matching {{ query }}:</p>

<ul class="grid">
    {% for r in results %}
        <li class="tile">
            <a href="/album/{{ r['aid'] }}">
                {% if r['art'] != None%}
                    <img class="cover" src={{ r['art'] }}></img>
                {% else %}
                    <img class="cover" src="{{ url_for('static', filename='../static/defaultrecord.png') }}"></img>
                {% endif %}
            </a>
            <p>{{ r['name'] }} by {{ r['artist'] }}</p>
        </li>
    {% endfor %}
</ul>

{% endblock %}{% extends "base.html" %}

{% block content %}

<h1>Select an album to update:</h1>

<form method=POST action='/update/'>
    <label for="menu-aid">{{ total }} albums missing data:</label>
    <select id="menu-aid" name="menu-aid">
        <option value="none">Choose One</option>
        {% for a in incompletes %}
        <option value="{{ a['aid'] }}">{{ a['name'] }} by {{ a['artist'] }}</option>    
        {% endfor %}
    </select>
    <input type="submit" class="submit-btn" name="submit-btn" value="Choose">
</form>

<div id="update-form">
    <p>Use "None" to set a field to null.</p>

    <form method=POST action="/update/">
        <table>
            <tr>
                <td><label for="album-id">Album ID</label></td>
                <td><input id="album-id" name='album-id' value="{{ a['aid'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-name">Album</label></td>
                <td><input id="album-name" name='album-name' value="{{ a['name'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-artist">Artist</label></td>
                <td><input id="album-artist" name='album-artist' value="{{ a['artist'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-year">Year</label></td>
                <td><input id="album-year" name='album-year' value="{{ a['year'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-format">Format</label></td>
                <td><input id="album-format" name='album-format' value="{{ a['fmt'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-location">Location</label></td>
                <td><input id="album-location" name='album-location' value="{{ a['location'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-art">Album Art</label></td>
                <td><input id="album-art" name='album-art' value="{{ a['art'] }}"></td>
            </tr>
            <tr>
                <td><label for="album-embed">Spotify Embed</label></td>
                <td><input id="album-embed" name='album-embed' value="{{ a['embed'] }}"></td>
            </tr>
        </table>
        <input type="submit" name="submit" value="update">
        <input type="submit" name="submit" value="delete">
        <input type="submit" name="spotify" value="Spotify">
        <!-- when "spotify" is clicked, tries to get data from spotify -->
    </form>
</div>

<!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

<script>

// Script to hide the update form until an album is selected

$(document).ready(function() {
    // hides the featured div by default
    $('#update-form').hide();

    // when an album is chosen,
    // populates appropriate fields
    $(".submit-btn").click(function(){
        // shows the featured div
        $("#featured-movie").show();
    });
});

</script> -->

{% endblock %}/* Authored by Bella Virgilio */

body {
    background-color: black;
    font-family: "Lucida Sans Unicode", "Lucida Grande", sans-serif;
    font-size: 18px;
    color: white;
    padding: 20px;
}

h1 {
  font-size: 36px;
  color: #fcb2a2;
}

h2 {
  font-size: 24px;
}

h3 {
  font-size: 18px;
}

h1,
h2,
h3,
p {
  padding: 10px;
}

a {
  color: #add8e6
}

#featured-movie {
  border: 3px dashed rgb(241, 226, 135);
  margin: 15px;
  padding: 20px;
  line-height: 10px;
}

#searchterm {
  width: 150px;
  padding: 10px 10px;
  margin: 8px;
  border-radius: 15px;
}

button {
  border-radius: 10px;
  padding: 5px 5px;
  margin: 5px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  grid-gap: 20px;
  list-style: none;
}

.tile {
  text-align: center;
  border-radius: 3px;
  padding: 20px;
  font-size: 14px;
}

.cover {
  width: 100%;
}